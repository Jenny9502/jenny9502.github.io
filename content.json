{"meta":{"title":"Zyn","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"使用 git 整理笔记 ","slug":"使用-git-整理笔记","date":"2018-03-10T09:06:49.000Z","updated":"2018-06-23T09:21:15.292Z","comments":true,"path":"2018/03/10/使用-git-整理笔记/","link":"","permalink":"http://yoursite.com/2018/03/10/使用-git-整理笔记/","excerpt":"","text":"记录常用 git 操作克隆远端代码git clone &apos;远端代码地址: Use an SSH key&apos; 分支管理查看当前所有分支 git branch 创建分支 work 为分支名可自定义 git branch work 切换分支 切换到work分支 git checkout work 创建并切换到敢创建的分支 git checkout -b work 删除分支 work git branch -d work 缓存缓存当前未提交的代码 git stash 缓存当前未提交代码并命名为 stashOne git stash save &quot;stashOne&quot; 查看缓存区列表 git stash list 取出缓存区最新的一条缓存代码 (取出的同时在缓存区移除) git stash pop 取出指定列表代码 代码编号(从list查看) git stash apply &quot;代码编号&quot; git 合作开发的基本操作拉取远端代码 拉取最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突git pull 推送代码到远程git push 添加修改的文件到版本库git add 添加所有的修改 git add . 添加指定文件的修改 git add &quot;指定路径&quot; 撤销修改git checkout 撤销所有的修改 git checkout . 撤销指定文件的修改 git checkout &quot;指定路径&quot; 提交上一步 add 的文件git commit -m &quot;此次修改或增加的功能简要说明&quot; 切换分支 切换到work分支git checkout work 查看提交日志git log 查看使用命令日志git reflog 查看工作区文件修改的内容git diff 版本回退HEAD:代表当前版本,HEAD^代表上个版本,HEAD^^上上个版本……HEAD~100…… git reset --hard 版本号 (或者HEAD)","categories":[],"tags":[]},{"title":"使用 redux 的相关笔记整理","slug":"使用-redux-的相关笔记整理","date":"2018-03-10T04:04:57.000Z","updated":"2018-06-23T07:46:32.713Z","comments":true,"path":"2018/03/10/使用-redux-的相关笔记整理/","link":"","permalink":"http://yoursite.com/2018/03/10/使用-redux-的相关笔记整理/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"The Learning styled-components","slug":"styled-components","date":"2018-01-16T09:04:22.000Z","updated":"2018-06-23T07:46:32.709Z","comments":true,"path":"2018/01/16/styled-components/","link":"","permalink":"http://yoursite.com/2018/01/16/styled-components/","excerpt":"","text":"安装1$ npm install --save styled-components 引入12import React from 'react';import styled from 'styled-components'; 使用定义1234const Div = styled.div` height:30px; 如同平时写的CSS一样写属性和属性值`; 使用&lt;Div&gt;..&lt;/Div&gt; Tips1.在定义名字时：const 名字 的名字首字母必须是 大写 才能起作用2.使用a标签做引用时，需要结合react-routerimport {Link} from &apos;react-router&apos; const ALink = styled(Link)` 如同平时写的CSS一样写属性和属性值 `; &lt;ALink url=&apos;&apos;&gt;&lt;/ALink&gt; 其中的 url 要必须存在 3.hover,action…等样式的编写const Div = styled.div` width:100px; &amp;:hover,&amp;focus,&amp;active{ border：1px solid #000; } `; 4.编辑下级样式const Div = styled.div` width:100px; .active{ border：1px solid #000; } `; 多用在引入了其他组件库时的对组件产生的盒子进行样式改动 5.实现有活动状态的高亮const Div = styled.div` color:${props =&gt; props.active ? &apos;#000&apos; : &apos;#fff&apos;} `; &lt;Div active = {true}&gt;黑色字体&lt;/Div&gt; &lt;Div active = {false}&gt;白色字体&lt;/Div&gt; 中括号里的值可以通过组件里的参数进行判断返回值，控制该Div的字体颜色 暂时学习到的只有这些，后面学到更多会继续更新","categories":[],"tags":[]},{"title":"Learning-React","slug":"Learnin-React","date":"2018-01-16T08:59:05.000Z","updated":"2018-06-23T07:46:32.708Z","comments":true,"path":"2018/01/16/Learnin-React/","link":"","permalink":"http://yoursite.com/2018/01/16/Learnin-React/","excerpt":"","text":"起步起步步骤网上有很多教程，这里就不多说了。我下面主要是记录在学习react过程中遇到的问题以及解决方法。 个人觉得用react开发非常适合多人开发，便于组件与组件之间的维护，提高开发效率。 组件间传递函数 在父组件定义的函数，在子组件调用 父组件： 123456//定义需要传递的函数parentTest = (msg) =&gt; &#123; console.log(\"msg:\",msg);&#125;//传递函数都子组件&lt;child TabClick=&#123;(msg) =&gt; &#123;this.parentTest(msg)&#125;&#125;&gt;&lt;/child&gt; 子组件: 12//在子组件调用TabClick函数&lt;Test onClick=&#123;(e)=&gt;this.props.TabClick(e)&#125;&gt;&lt;/Test&gt; State赋值1234state=&#123; name: 'zyn', List: [2,4,7]&#125; 只能设置this.setState({‘name’,’hhh’})，不能设置this.setState({‘list[2]’,3}) 组件基类 Component 和 PureComponent 的区别 一般我们是通过控制组件的state，props的变化刷新组件。 12345//同一个statestate=&#123; name: 'zyn', List: [2,4,7]&#125; 当设置了this.setState({‘name’,’hhh’})，在Component和PureComponent基类下，组件都会刷新。当更改了list[2]的值，重新给this.setState({‘list’,list})赋值后，在Component下组件会刷新，而在PureComponent下组件不会刷新。所以，在PureComponent基类下，只有state的根值发生变化才会引发组件的变化。 约束组件和非约束组件报错约束组件和非约束组件之一 在Input组件，不使用defaultvalue来控制值时(也就是用value)，需要添加一个onChange事件，即使是空的也要给。 在input的type时，checked={checked}，当这个‘checked’值可能会为空时，记得要checked={checked || ‘’},也要赋值 生命周期ComponentWillReceiveProps 使用这个生命周期的时候需要主要，只要以改变state和prop，组件都会触发刷新，所以需要进行判断是否需要刷新组件。 更新ing","categories":[],"tags":[]},{"title":"使用hexo的基本操作","slug":"第一次创建hexo文件","date":"2017-12-28T08:26:26.000Z","updated":"2018-06-23T07:46:32.715Z","comments":true,"path":"2017/12/28/第一次创建hexo文件/","link":"","permalink":"http://yoursite.com/2017/12/28/第一次创建hexo文件/","excerpt":"","text":"hexo 基本用法和git代码管理hexo server :启动本地浏览; hexo new post &quot;新建文件名&quot;：新建一篇文章; hexo clean &amp;hexo g :更改了配置文件后，需要更新文件并且重置； hexo generate hexo deploy git status //查看有什么改动的代码，这里运营了git来管理代码 git add . //确认添加修改的代码 git commit //commit修改的代码 git push代码到网上的博客(我这里是push 到 origin source); 记录常用Markdown 基本语法的使用段落 直接写 标题在首行插入1到6个‘#’，对应到标题1到6阶 代码块代码行缩进四个空格 分割线在一行中用三个或以上的星号，减号，底线来建立一个分割线，行内不能有其他东西 链接Markdown 支持两种形式的链接语法： 行内式和参考式， 但是不管哪一种， 链接文字都是用 “[方括号]”来标记 插入超链接语法[链接名](URL) 百度 行内式只要在方块括号后面紧接着圆括号并插入网址链接即可，1是有“Title” 的。 1.This is [an example](http://www.baidu.com/ &quot;Title&quot;) inline link 显示如下,注意加title前面需要空格隔开 This is an example inline link 2.[This link](http://www.baidu.com/)has no title attribute 显示如下 This linkhas no title attribute 参考式链接是在链接文字的括号后面在接一个方括号，而在第二个方括号里面填入用以辨识链接的标记，我不常用，不写了 插入图片 插入图片语法 ![图片的替代文字](图片URL &quot;title&quot;) ![somi](http://p1p8cvl3a.bkt.clouddn.com/f.png &quot;somi&quot;) Tips:创建了七牛CDN的网上存储器 – 管理控制台-对象存储-内容管理-上传文件-选择文件后即可使用链接打开图片","categories":[],"tags":[]}]}